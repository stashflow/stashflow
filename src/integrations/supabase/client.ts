// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables in development, hardcoded values in production
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://vzxifhvyxybvzlanghiu.supabase.co';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ6eGlmaHZ5eHlidnpsYW5naGl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyNTM2NDEsImV4cCI6MjA2MDgyOTY0MX0.BcO6uRTIvWwmZdMDOUltjlay_58_2zwEM0s3GB8oPS4';

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Anon Key:', supabaseAnonKey?.substring(0, 10) + '...');

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// Get the base URL of the app
const isGitHubPages = window.location.hostname.includes('github.io');
const baseUrl = window.location.origin;

// For Github Pages, we need to use the static file-based auth callback
// For other deploys, use the standard path
const redirectUrl = isGitHubPages ? 
  `${baseUrl}/auth_callback.html` : 
  `${baseUrl}/auth/callback`;

console.log('Auth redirect URL:', redirectUrl);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  supabaseUrl, 
  supabaseAnonKey,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      // We'll use different flow types depending on the environment
      flowType: isGitHubPages ? 'implicit' : 'pkce',
      storage: {
        getItem: (key: string) => {
          const item = localStorage.getItem(key);
          console.log(`Getting storage: ${key}`, item ? 'present' : 'missing');
          return item;
        },
        setItem: (key: string, value: string) => {
          console.log(`Setting storage: ${key}`);
          localStorage.setItem(key, value);
        },
        removeItem: (key: string) => {
          console.log(`Removing storage: ${key}`);
          localStorage.removeItem(key);
        }
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'stash-flow-gallery'
      }
    }
  }
);

// Configure auth redirect URL
// This is done separately from initialization to ensure compatibility
console.log('Setting up sign-in with redirect URL:', redirectUrl);

console.log('Supabase client config:', {
  url: supabaseUrl,
  redirectUrl,
  isGitHubPages,
  flowType: isGitHubPages ? 'implicit' : 'pkce'
});

// Function to sign in with Google
export const signInWithGoogle = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: redirectUrl
    }
  });
  
  if (error) {
    console.error('Google sign-in error:', error);
    throw error;
  }
  
  return data;
};