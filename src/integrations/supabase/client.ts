// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables in development, hardcoded values in production
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://vzxifhvyxybvzlanghiu.supabase.co';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ6eGlmaHZ5eHlidnpsYW5naGl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyNTM2NDEsImV4cCI6MjA2MDgyOTY0MX0.BcO6uRTIvWwmZdMDOUltjlay_58_2zwEM0s3GB8oPS4';

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Anon Key:', supabaseAnonKey?.substring(0, 10) + '...');

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// Simple way to detect if we're in GitHub Pages
const isGitHubPages = window.location.hostname.includes('github.io');
console.log('Is GitHub Pages:', isGitHubPages);

// Direct Supabase to auth_callback.html for GitHub Pages
let redirectUrl;
if (isGitHubPages) {
  // GitHub Pages: Use a direct HTML file callback
  redirectUrl = `${window.location.origin}/auth_callback.html`;
} else {
  // Development: Use hash-based routing
  redirectUrl = `${window.location.origin}/#/auth/callback`;
}

console.log('Auth redirect URL:', redirectUrl);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  supabaseUrl, 
  supabaseAnonKey,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      // Don't specify a flowType - let Supabase decide the best approach
      storage: {
        getItem: (key: string) => {
          const item = localStorage.getItem(key);
          console.log(`Getting item from storage: ${key}`, item ? 'present' : 'missing');
          return item;
        },
        setItem: (key: string, value: string) => {
          console.log(`Setting item in storage: ${key}`, value ? 'value present' : 'value missing');
          localStorage.setItem(key, value);
        },
        removeItem: (key: string) => {
          console.log(`Removing item from storage: ${key}`);
          localStorage.removeItem(key);
        }
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'stash-flow-gallery'
      }
    }
  }
);

// Log initial configuration
console.log('Supabase client configured with:', {
  url: supabaseUrl,
  origin: window.location.origin,
  pathname: window.location.pathname,
  hash: window.location.hash,
  detectSessionInUrl: true
});